# 1 Обзор
Данный проект реализует **попап**, **alert** (предупреждение/уведомление) и **confirm** (подтверждение) диалоги с использованием легкого ООП и возможностью
стилизовать эти диалоги.
# 2 Оглавление
1. [Обзор](#user-content-1-Обзор)
2. Оглавление
3. [Попап](#user-content-3-Попап)  
3.1. [API](#user-content-31-api)  
3.1.1. [new **Popup**(**content**, _[**options**]_)](#user-content-311-new-popupcontent-options)  
3.1.2. [Popup.prototype.**open**()](#user-content-312-popupprototypeopen)  
3.1.3. [Popup.prototype.**close**()](#user-content-313-popupprototypeclose)  
3.1.4. [Popup.prototype.**center**()](#user-content-314-popupprototypecenter)  
3.1.5. [Popup.prototype.**getNode**()](#user-content-315-popupprototypecleanup)  
3.1.6. [Popup.prototype.**sub**(**eventName**, **handler**)](#user-content-316-popupprototypesubeventname-handler)  
3.1.7. [Popup.prototype.**pub**(**eventName**, *[data1, data2, ...]*)](#user-content-317-popupprototypepubeventname-data1-data2-)  
3.2. [Поддержка декларативных событий](#user-content-32-Поддержка-декларативных-командсобытий)  
4. [Диалог предупреждения (Alert)](#4)  
4.1. [API](#4_1)  
4.2. [Пример](#4_2)  
5. [Диалог подтверждения (Confirm)](#4)  
5.1. [API](#5_1)  
5.2 [Пример](#5_2)

# 3 Попап
Этот диалог является базовым для всех остальных и позволяет размещать в себе произвольное HTML-содержимое.

## 3.1 API
### 3.1.1 new **Popup**(**content**, *[**options**]*)
Создает экземпляр попапа.
#### **content**<sub>обязательный</sub>
Задает содержимое попапа.  
Строка<sub>1</sub> с HTML или элемент DOM (в jQuery контейнере<sub>2</sub> или без<sub>3</sub>).  
Пример:

```js
var content, myPopup;  

//случай 1
content = '<div>Это содержимое попапа</div>';
myPopup = new Popup(content);

//случай 2
content = $('#myContent');
myPopup = new Popup(content);

//случай 3
content = document.createElement('div');
myPopup = new Popup(content);
```
#### **options**<sub>необязательный</sub>
Объект, задает настройки попапа. Поддерживаемые настройки:
- `width`  
    По умолчанию не задано, целое число. Точная ширина попапа в пикселях. Если задано, то попап не подстраивается под содержимое по ширине. 
- `minWidth`  
    По умолчанию не задано, целое число. Минимальная ширина попапа в пикселях.  
- `maxWidth`  
    По умолчанию не задано, целое число. Максимальная ширина попапа в пикселях.  
- `autoOpen`  
    По умолчанию `false`. Если `true`, попап открывается сразу при создании.
- `modal`  
    По умолчанию `false`. Если `true`, попап открывается поверх всего с использованием оверлея (клик по оверлею вызывает закрытие попапа).
- `autoCleanup`  
    По умолчанию `false`. Если `true`, попап уничтожается (удаляет все свои ресурсы, обработчики и т. п.) сразу после закрытия.
- `namespace`  
    По умолчанию `'popup'`. Задает название для пространство имен событий jQuery, используемых попапом.

Пример:
```js
myPopup = new Popup(content, {
    autoOpen: true, //откроется при создании
    autoCleanup: true, //уничтожится при закрытии
    modal: true, //с использованием оверлея
    minWidth: 300, //шириной от 300 пикселей
    maxWidth: 600 //до 600 пикселей
});
```
### 3.1.2 Popup.prototype.open()
Открывает экземпляр попапа и центрирует его. Если настройка `modal` установлена в `true`, то используется блокирующий оверлей под попапом.    
Генерирует событие `open`.  
Пример:
```js
myPopup = new Popup(content);
myPopup.open();
```
### 3.1.3 Popup.prototype.close()
Закрывает экземпляр попапа. Если настройка `autoCleanup` установлена в `true`, то уничтожает попап после закрытия.  
Генерирует событие `close`.  
Пример:
```js
myPopup = new Popup(content);
myPopup.open();
myPopup.close();
```
### 3.1.4 Popup.prototype.center()
Центрирует попап относительно окна. При центрировании учитывается поддержка браузером css `position: fixed` и в ее отсутствие используется `absolute`.  
Если попап больше окна по какой-либо из осей (по X и/или Y), то по этой оси он не центрируется, а позиционируется в начале (слева для X, сверху для Y) и при этом используется `absolute`, чтобы можно было проскролить попап.  
Пример:
```js
myPopup = new Popup(content);
myPopup.open();
myPopup.close();
```
### 3.1.5 Popup.prototype.cleanup()
Закрывает и уничтожает попап, после чего данный экземпляр уже не может использоваться. При этом удаляются DOM элементы попапа и обработчики событий.  
Генерирует событие `cleanup` перед началом уничтожения.  
Пример:
```js
myPopup = new Popup(content);
myPopup.open();
myPopup.cleanup();
//попап уничтожен и не пригоден для дальнейшего использования
```
### 3.1.5 Popup.prototype.getNode()
Возвращает корневой DOM элемент попапа в jQuery контейнере.  
Пример:
```js
myPopup = new Popup('<a href="#">Ссылка</a>');
myPopup.getNode().on('click', 'a', function(e){
  e.preventDefault();
  console.log('Нажата ссылка в попапе');
});
myPopup.open();
//при клике по ссылке в попапе, в консоль будет выведено сообщение
```
### 3.1.6 Popup.prototype.sub(eventName, handler)
Позволяет подписать функцию-обработчик `handler` на событие `eventName` попапа. Встроенные события:  
- `open`  
    Генерируется при открытии попапа.
- `close`  
    Генерируется при закрытии попапа.
- `cleanup`  
    Генерируется при уничтожении попапа.

Пример:
```js
myPopup = new Popup(content);
myPopup.sub('open', function(){
  console.log('Попап открыт!');
});
myPopup.open(); //в консоль выведется 'Попап открыт!'
```
### 3.1.7 Popup.prototype.pub(eventName, *[data1, data2, ...]*)
Генерирует на попапе событие `eventName`, сопровождая это событие произвольным количеством аргументов `data1`, `data2` и т. д., которые будут переданы обработчикам этого события.  
События `open`, `close`, и `cleanup` и `cmd` зарезервированы для внутреннего использования и не должны генерироваться вручную.  
Попап реагирует на следующие события:
- `resize`  
    Без аргументов. Попап обновляет свои размеры в соответствии с настройками и размерами содержимого.

Пример:
```js
// Используем событие resize для обновления размеров попапа после загрузки изображения
myPopup = new Popup('<img src="some_image.jpg" alt="">');
myPopup.getNode().find('img').load(function(){
    myPopup.pub('resize'); //говорим попапу обновить размеры
});
myPopup.open();
```
## 3.2 Поддержка декларативных команд/событий
Попап позволяет назначать элементам верстки (которая передается в `content`) команды с помощью data-атрибута `data-popup-cmd`.
>Если настройка `namespace` попапа была задана, то вместо префикса `popup` должно использоваться ее значение.

Пример верстки с командами:
```html
<script type="text/template" id="exampleTemplate">
    <div>
        <h1>Удалить сообщение?</h1>
        <a href="#" data-popup-cmd="pub-yes,close">Удалить</a>
        <a href="#" data-popup-cmd="pub-no,close">Отмена</a>
    </div>
</script>
<script>
var content = $.parseHTML($('#exampleTemplate').html()),
    popup = new Popup(content, {
        modal: true
    });
popup
    .sub('yes', function(){
        console.log('Удаляем сообщение');
    })
    .sub('no', function(){
        console.log('Передумали удалять сообщение');
    });
popup.open();
/* При нажатии на любую из ссылок в открывшемся попапе в консоль будет выведено
соотвутствующее сообщение, а попап закрыт */
</script>
```
Может быть указано сразу несколько команд (как в примере выше), тогда они разделяются запятыми.
Допустимые команды:
- `close`  
Закрывает попап.
- `pub-имя_события`  
Генерирует на попапе событие с именем `имя_события` (напр., `pub-cancel`, `pub-ok` и т. д.), когда по данному элементу совершается клик левой кнопкой мыши.  
`Имя_события` может быть любой строкой из букв английского алфавита, цифр, дефиса `"-"` и подчеркивания `"_"`. При этом эффект будет аналогичен тому, как если бы на элементе был установлен обработчик, генерирующий необходимое событие.  
Пример:
```js
// атрибут data-cmd="pub-meow" элемента $elem равноценен следующему коду
$elem.on('click', function(e){
    e.preventDefault();
    popup.pub('meow');
});
```

>Команды, указанные в `data-cmd` атрибуте выполняются слева-направо.

>При уничтожении попапа, обработчики декларативных команд и событий удаляются попапом автоматически.